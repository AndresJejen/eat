#!/usr/bin/env python

# create fourfit ad-hoc phase file from single baseline
# 2017-03-15 Lindy Blackburn

from eat.io import hops, util
import numpy as np
import pandas as pd
import argparse

fmt = {
'days':'{:010.6f}'.format,
'phase_unwrap':'{:6.1f}'.format
}

parser = argparse.ArgumentParser()
parser.add_argument('filename', help='alist txt file')
parser.add_argument('nchan', help='number of channels', nargs='?', type=int, default=60)
parser.add_argument('-f', '--flip', help='flip phases, for use with the REM site (default is REF)', action="store_true"),
args = parser.parse_args()

# read alist file (autodetect version 5 or 6)
a = hops.read_alist(args.filename)

util.add_days(a)

"""
Note: according to doc/fourfit/file_based_pcal.tex,

The time points are considered to be either instantaneous values, or the
result of a linear average of the phase, symmetric about the specified epoch.
The algorithm within fourfit performs a linear interpolation between the
specified points, and then finds the average value of the piece-wise linear
function so derived over each accumulation period in a fringe fit. If the ap
data extends beyond the range of the piecewise linear pcal function, then the
function is extrapolated linearly (if possible) to cover the ap.

so an effort should be made to accurately timestamp the middle of the segment

add_days converts straight from timetag, which is halfway into scan for fingex
output, but rounded (?) to the nearest second boundary
"""

a['phase_unwrap'] = (-1. if args.flip else 1.) * np.unwrap(a.resid_phas, 180.)

# fmt = ['{:10.6f}'.format,] + ['{:6.1f}'.format,]*args.nchan
print a[['days',] + ['phase_unwrap',]*args.nchan].to_string(formatters=fmt, header=False, index=False)

