#!/usr/bin/env python

# ALIST cmd-line selecting and printing
# 2016-10-11 Lindy Blackburn

from eat.io import hops, util, misc
import pandas as pd
import numpy as np
import sys

import argparse

additional_fmt = {
'mbd_unwrap':'{:,.5f}'.format
}

"""
[alist v6] version root_id two extent_no duration length offset expt_no
scan_id procdate year timetag scan_offset source baseline quality freq_code
polarization lags amp snr resid_phas phase_snr datatype sbdelay mbdelay
ambiguity delay_rate ref_elev rem_elev ref_az rem_az u v esdesp epoch ref_freq
total_phas total_rate total_mbdelay total_sbresid srch_cotime noloss_cotime
ra_hrs dec_deg resid_delay [alist v5] version root_id two extent_no duration
length offset expt_no scan_id procdate year timetag scan_offset source
baseline quality freq_code polarization lags amp snr resid_phas phase_snr
datatype sbdelay mbdelay ambiguity delay_rate ref_elev rem_elev ref_az rem_az
u v esdesp epoch ref_freq total_phas total_rate total_mbdelay total_sbresid
srch_cotime noloss_cotime [tlist v6] version expt_no three scan_id year
timetag scan_offset source freq_code lags triangle roots extents lengths
duration offset scan_quality data_quality esdesp bis_amp bis_snr bis_phas
datatype csbdelay cmbdelay ambiguity cdelay_rate elevations azimuths epoch
ref_freq cotime
"""

parser = argparse.ArgumentParser(epilog=
'[alist v6] ' + ' '.join(map(str, hops.ffields_v6)) + 
' [alist v5] ' + ' '.join(map(str.format, hops.ffields_v5)) + 
' [tlist v6] ' + ' '.join(map(str.format, hops.tfields_v6))
)
parser.add_argument('filename', nargs='+', help='alist txt file[s]')
parser.add_argument('-c', '--columns', help='space separated default columns to print (optional)', nargs='*', default=None)
parser.add_argument('-a', '--add-columns', help='add these columns to the default list', nargs='*', default=None)
parser.add_argument('-r', '--remove-columns', help='remove these columns from the default list', nargs='*', default=None)
parser.add_argument('-n', '--no-auto', help='do not print autocorrelations', action="store_true")
parser.add_argument('-s', '--sort-by', help='sort by these columns', nargs='*', default=None)
parser.add_argument('-f', '--filter', help='filter is a set of key value requirements: e.g. -f baseline GE source BLLAC', nargs='*', default=None)
parser.add_argument('-e', '--expression', help='expression is a python expression to evaluate on each row which evaluates to true if row is to be kept', default=None)
args = parser.parse_args()

# which kind of file are we looking at (may not close file until garbage collect?)
firstline = (a for a in open(args.filename[0])
    if a[0] is not '*').next().strip().split()
if(len(firstline) == len(hops.ffields_v6) and firstline[0] == '6'):
    (readfun, fmt) = (hops.read_alist_v6, hops.fformatters_v6)
    defaultcol = "scan_id timetag source baseline polarization amp snr resid_phas sbdelay mbdelay delay_rate".split()
elif(len(firstline) == len(hops.ffields_v5) and firstline[0] == '5'):
    (readfun, fmt) = (hops.read_alist_v5, hops.fformatters_v5)
    defaultcol = "scan_id timetag source baseline polarization amp snr resid_phas sbdelay mbdelay delay_rate".split()
elif(len(firstline) == len(hops.tfields_v6) and firstline[0] == '6'):
    (readfun, fmt) = (hops.read_tlist_v6, hops.tformatters_v6)
    defaultcol = "scan_id timetag source triangle duration bis_snr bis_phas cmbdelay cdelay_rate".split()
elif(len(firstline) == len(hops.tfields_v6) and firstline[0] == '5'): # it appears this can happen
    (readfun, fmt) = (hops.read_tlist_v6, hops.tformatters_v6)
    defaultcol = "scan_id timetag source triangle duration bis_snr bis_phas cmbdelay cdelay_rate".split()
elif(len(firstline) == len(misc.RLULIST_FIELDS) and firstline[0] == "#dd"):
    (readfun, fmt) = (misc.read_rlulist, misc.rluformatters)
    defaultcol = misc.RLULIST_FIELDS
else:
    (readfun, fmt) = (misc.read_generic, dict())
    defaultcol = None

a = pd.concat([readfun(fname) for fname in args.filename], ignore_index=True)
if args.columns is None:
    columns = defaultcol or a.columns
else:
    columns = args.columns
if args.add_columns is not None:
    columns += args.add_columns
if args.remove_columns is not None:
    for c in args.remove_columns:
        columns.remove(c)

if args.no_auto:
    a = a[a.baseline.map(lambda x: x[0] != x[1])]

if 'gmst' in columns:
    util.add_gmst(a)
if 'mbd_unwrap' in columns:
    util.unwrap_mbd(a)
if 'utime' in columns:
    util.add_utime(a)
# convenience
if 'timetag' in a and 'hour' not in a:
    util.add_hour(a)

if args.filter is not None:
    if len(args.filter) % 2 != 0:
        sys.exit("one (python expr) or 2N (key==val requirements) filter elements required")
    keep = reduce(np.bitwise_and, ((a[key] == val for key, val in
        zip(args.filter[::2], args.filter[1::2]))))
    a = a[keep]

if args.expression is not None:
    a = a[[eval(args.expression, row._asdict()) for row in a.itertuples()]]

if args.sort_by is not None:
    a = a.sort_values(args.sort_by)

fmt.update(additional_fmt)
print a[columns].to_string(formatters=fmt)
