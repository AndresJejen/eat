#!/usr/bin/env python
#
# Use ALMA to reference phase-cal phases and delay offsets
# 2017-11-22 Chi-kwan Chan (move from pipeline to EAT)
# 2017-12-28 CKC major update to simplify pipelining

from __future__ import print_function

import datetime, pwd, os, sys
import argparse
import string

import pandas as pd
import numpy  as np

from eat.io   import hops, util
from eat.hops import util as hu

#==============================================================================
# Helper functions

def get_param(file, baseline=True, diff=True, source=False, nchan=False, head=False):
    """Read alist and select columns that are needed for phase cal
    """
    a = util.noauto(hops.read_alist(file))
    a = a[(a.polarization == 'LL') | (a.polarization == 'RR')]
    a = a.reset_index(drop=True)
    util.add_path(a)

    if head: # for testing
        a = a.iloc[0:10]

    cols = ['baseline' if baseline else 'path']
    if source:
        cols += ['source']
    if nchan:
        a['nchan']= 32
        cols += ['nchan']
    cols += ['quality', 'snr', 'resid_phas']

    chans  = list(string.ascii_letters[:32])
    phases = np.zeros((len(a), len(chans)), dtype=np.float32)
    for i, p in a.path.iteritems():
        if diff:
            deg2rad = np.pi / 180.0
            t = a.resid_phas[i] * deg2rad
            v = hu.pop210(p) * np.exp(-1j * t)
        else:
            v = hu.pop210(p)
        phases[i,:] = np.angle(v, deg=True)

    return pd.concat([a[cols], pd.DataFrame(phases, columns=chans)], axis=1)

def unwrap(phi):
    for i in np.arange(phi.shape[1]-1)+1:
        a, b = phi[:,i-1], phi[:,i]
        b[b - a >  180] -= 360
        b[b - a < -180] += 360
        phi[:,i] = b
    return phi

def qfit(y1, y2, y3):
    a  =       y1
    b  = (-3.0*y1 + 4.0*y2 - y3) / 2.0
    c  = (     y1 - 2.0*y2 + y3) / 2.0
    return a, b, c

def mkplot(baselines, phases, slopes, target):
    import matplotlib.pyplot as plt
    import matplotlib.cm     as cm # not best practice, but avoid extra
                                   # library when no graph is specified
    cs = cm.rainbow(np.linspace(0,1,len(df)))
    d  = np.array([-0.5,0.5])
    x  = np.arange(32)
    for i, b in baselines.iteritems():
        y = phases[i,:]
        m = slopes[i,:]
        plt.scatter(x, y, color=cs[i], label=b)
        for j in np.arange(32):
            plt.plot(x[j]+d, y[j]+d*m[j], color=cs[i])
    plt.legend()
    if "." in target:
        plt.savefig(target)
    else:
        plt.show()

def output(s, a, t):
    out = pd.DataFrame(data=a)
    out.insert(0, 'label', s)
    out.to_csv(t, index=False, header=False, sep=" ", float_format="%.9g")

def output_cf(sites, pol, phases, delays, target):
    with open(target, "w") as f:
        p = "" if pol is None else "_"+pol
        for i, s in sites.iteritems():
            f.write("""if station {}
  pc_phases{}  abcdefghijklmnopqrstuvwxyzABCDEF""".format(s, p))
            for j in range(32):
                f.write(" {:.6f}".format(phases[i,j]))
            f.write("""
  delay_offs{} abcdefghijklmnopqrstuvwxyzABCDEF""".format(p))
            for j in range(32):
                f.write(" {:.6f}".format(delays[i,j]))
            f.write("\n\n")

#==============================================================================
# Main code
#------------------------------------------------------------------------------
# Logging
statline = "[{}] {}@{}:{}$ {}".format(
    datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
    pwd.getpwuid(os.getuid())[0], os.uname()[1], os.getcwd(),
    ' '.join(sys.argv))

#------------------------------------------------------------------------------
# Argument parsing and read input file
parser = argparse.ArgumentParser(
    description="Estimate phase-cal phases and delay offsets")
parser.add_argument('filename',
                    help='alist file')
parser.add_argument('-o', '--outfile', default=None, type=str,
                    help='output csv filename')
parser.add_argument('-c', '--controlcodes', default=False, action='store_true',
                    help='construct control codes rather than csv table')
parser.add_argument('-g', '--graph', default=None,
                    help="graphic output")
args = parser.parse_args()

#------------------------------------------------------------------------------
# Get necessary data to perform phase cal
param = get_param(args.filename, head=True)

#------------------------------------------------------------------------------
# Pull out baselines, unwrap phases, use one-side and mid-point
# methods to esimate slopes
baselines = df[0]
phases    = unwrap(df.iloc[:,1:].values)
slopes    = np.concatenate((np.reshape(phases[:, 1 ] - phases[:,  0], (-1,1)),
                                0.5 * (phases[:, 2:] - phases[:,:-2]),
                            np.reshape(phases[:,-1 ] - phases[:, -2], (-1,1))),
                           axis=1)

# Extrapolation for last channel
a, b, c = qfit(phases[:,-4], phases[:,-3], phases[:,-2])
phases[:,-1] = a + 3.0*b + 9.0*c # == a + b x +   c x**2 with x == 3
slopes[:,-1] =         b + 6.0*c # ==     b   + 2 c x    with x == 3

# Apply fitted slope (instead of one-side derivative) to edge channels
slopes[:,-2] = b + 4.0*c # == b   + 2 c x    with x == 2
a, b, c = qfit(phases[:,0], phases[:,1], phases[:,2])
slopes[:, 0] = b         # == b   + 2 c x    with x == 0

d_nu   = 58.59375e6 # hard wire separation between channels
delays = 1e9 * (slopes / 360.0) / d_nu # in nanosecond

#------------------------------------------------------------------------------
# Outputs
if args.gout is not None:
    mkplot(baselines, phases, slopes, args.gout)

if args.pout is not None:
    output(baselines.str[0], phases, args.pout)
else:
    output(baselines, phases, sys.stdout)

if args.sout is not None:
    output(baselines.str[0], slopes, args.sout)

if args.dout is not None:
    output(baselines.str[0], delays, args.dout)

if args.cout is not None:
    output_cf(baselines.str[0], pol, phases, delays, args.cout)
